What happens when you initialize a repository? Why do you need to do it?

	It creates a hidden folder (.git) for holding the meta data for repo.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Like a "temp folder" holding files added, ready to be commited to repo.

How can you use the staging area to make sure you have one commit per logical
change?
	
	After running git add file, the file is waiting to be commited.
	We could compare the change in the file, comparing the change in
	staging area to working directory, running git diff.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When f.ex. trying out new ideas, versions, and bug fixing.
	The changes are commited to the branch, leaving the orginal intact.
	See it like context switching.

How do the diagrams help you visualize the branch structure?

	Helps us see where a branch starts, and how many commits are made on
	that branch. We also see if we have started a new branch on a 
	previous commit in the branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	When merged, the branches are combined togheter, sorted by timestamps.
	Now the branch belongs to the checked out branch before merging.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?